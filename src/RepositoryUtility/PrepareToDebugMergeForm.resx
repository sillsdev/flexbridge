<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAZAAAAGQAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAZAAAAGQAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAqQAAANoAAADaAAAAqQAA
        ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAqQAA
        ANoAAADaAAAAqQAAADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAAANwAAAD/AAAA/wAA
        AP8AAAD/AAAA3AAAADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAA
        ANwAAAD/AAAA/wAAAP8AAAD/AAAA3AAAADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAACoAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAqAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAYAAACoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAqAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAGQAA
        ANkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADZAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAGQAAANkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADZAAAAGQAAAAAAAAAAAAAAAAAA
        AAAAAAAZAAAA2QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANkAAAAZAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAZAAAA2QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANkAAAAZAAAAAAAA
        AAAAAAAAAAAAAAAAAAUAAACnAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApwAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAACnAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApwAA
        AAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAADcAAAA/wAAAP8AAAD/AAAA/wAAANwAAAA4AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAADcAAAA/wAAAP8AAAD/AAAA/wAA
        ANwAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEcAAADtAAAA/wAAAP8AAADtAAAARwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEcAAADtAAAA/wAA
        AP8AAADtAAAARwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAOAAAAD/AAAA/wAA
        AOAAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAA
        AOAAAAD/AAAA/wAAAOAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAA4AAA
        AP8AAAD/AAAA4AAAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA4AAAAP8AAAD/AAAA4AAAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAADgAAAA/wAAAP8AAADgAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB4AAADgAAAA/wAAAP8AAADgAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHwAAAOAAAAD/AAAA/wAAAOAAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOAAAAD/AAAA/wAAAOAAAAAfAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAUAAAAzwAAAP8AAAD/AAAAzwAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4AAAAP8AAAD/AAAA4AAAAB8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAAA0QAAANEAAABYAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAADgAAAA/wAAAP8AAADgAAAAHwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAVAAAAFQAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIwAAAOQAAAD/AAAA/wAA
        AN4AAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFQAAABUAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAUAAAAFAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBAAAA9AAA
        AP8AAAD/AAAAzgAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAADRAAAA0QAAAF0AAAACAAAAAAAA
        AAAAAAACAAAAXQAAANAAAADRAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AIwAAAD/AAAA/wAAAP8AAACnAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAzwAAAP8AAAD/AAAA7gAA
        AGIAAAACAAAAAgAAAGMAAADuAAAA/wAAAP8AAADPAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA/AAAA5wAAAP8AAAD/AAAA/QAAAGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAADPAAAA/wAA
        AP8AAAD/AAAA7QAAAGQAAABkAAAA7gAAAP8AAAD/AAAA/wAAAM8AAAAVAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAAPwAAANEAAAD/AAAA/wAAAP8AAADPAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AF0AAADuAAAA/wAAAP8AAAD/AAAA8wAAAPMAAAD/AAAA/wAAAP8AAADuAAAAXgAAAAAAAAAAAAAAAQAA
        ABQAAAAjAAAAQAAAAIwAAADnAAAA/wAAAP8AAAD/AAAA9gAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAGMAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7gAAAGMAAAACAAAAAAAA
        AAAAAABYAAAA0AAAAOUAAAD0AAAA/wAAAP8AAAD/AAAA/wAAAPwAAACPAAAACAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAGQAAAD0AAAA/wAAAP8AAAD/AAAA/wAAAPQAAABkAAAAAgAA
        AAAAAAAAAAAAFAAAAM8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD2AAAAjwAAAA8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAZAAAAPQAAAD/AAAA/wAAAP8AAAD/AAAA9AAA
        AGQAAAACAAAAAAAAAAAAAAAUAAAAzwAAAP8AAAD/AAAA/wAAAP8AAAD8AAAA0AAAAGAAAAAIAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAGMAAADuAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA7gAAAGIAAAACAAAAAAAAAAAAAABYAAAA0AAAAN4AAADOAAAApwAAAGIAAAAaAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeAAAA7gAAAP8AAAD/AAAA/wAA
        APMAAADzAAAA/wAAAP8AAAD/AAAA7gAAAF0AAAAAAAAAAAAAAAEAAAAUAAAAHQAAABIAAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAM8AAAD/AAAA/wAA
        AP8AAADtAAAAZAAAAGQAAADtAAAA/wAAAP8AAAD/AAAAzwAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAzwAA
        AP8AAAD/AAAA7gAAAGMAAAACAAAAAgAAAGMAAADuAAAA/wAAAP8AAADPAAAAFAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABYAAAA0QAAANAAAABdAAAAAgAAAAAAAAAAAAAAAgAAAF4AAADRAAAA0QAAAFgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAUAAAAFAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABQAAAAUAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////w//w/4H/4H8A/8A+AH+AHgB/gB4Af4AeAH+AHwD/wD+B/+B/gf
        /gf4H/4H+B/+B/gf/gf4H/4H/D/+B/w//gfDw/4HwYP8B4AB/A+AAfAPwAMAH8ADAB/gBgA/4AYAf8AD
        Af/AAwf/gAH//4AB///Bg///w8P///////8=
</value>
  </data>
</root>