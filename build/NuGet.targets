<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)/../</SolutionDir>

		<!-- Enable the restore command to run before builds -->
		<RestorePackages Condition="  '$(RestorePackages)' == '' ">true</RestorePackages>

		<!-- Determines if package restore consent is required to restore packages -->
		<RequireRestoreConsent Condition=" '$(RequireRestoreConsent)' != 'false' ">false</RequireRestoreConsent>

		<!-- Download nuget.exe if it does not already exist -->
		<DownloadNuGetExe Condition=" '$(DownloadNuGetExe)' == '' ">true</DownloadNuGetExe>
		<RestorePackages Condition=" '$(RestorePackages)' == ''">true</RestorePackages>
		<NuGetExeUrl>https://dist.nuget.org/win-x86-commandline/latest/nuget.exe</NuGetExeUrl>
	</PropertyGroup>

	<PropertyGroup>
		<NuGetToolsPath>$(MSBuildThisFileDirectory)</NuGetToolsPath>
		<PackagesConfig>$(ProjectDir)packages.config</PackagesConfig>
		<PlatformPackagesConfig Condition="'$(OS)'=='Windows_NT'">$(NuGetToolsPath)nuget-windows/packages.config</PlatformPackagesConfig>
		<PlatformPackagesConfig Condition="'$(OS)'!='Windows_NT'">$(NuGetToolsPath)nuget-linux/packages.config</PlatformPackagesConfig>
		<CommonPackagesConfig>$(NuGetToolsPath)nuget-common/packages.config</CommonPackagesConfig>

		<!-- NuGet command -->
		<NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)/nuget.exe</NuGetExePath>

		<NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
		<NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono $(NuGetExePath)</NuGetCommand>
		<!-- Command to download packages -->
		<RestoreCommandCommon>$(NuGetCommand) restore "$(CommonPackagesConfig)" -NonInteractive -SolutionDirectory "$(SolutionDir)"</RestoreCommandCommon>
		<RestoreCommandPlatformSpecific>$(NuGetCommand) restore "$(PlatformPackagesConfig)" -NonInteractive -SolutionDirectory "$(SolutionDir)"</RestoreCommandPlatformSpecific>
	</PropertyGroup>

	<Target Name="CheckPrerequisites">
		<!-- Raise an error if we're unable to locate nuget.exe  -->
		<Error Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')"
			Text="Unable to locate '$(NuGetExePath)'" />
		<!--
		Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
		This effectively acts as a lock that makes sure that the download operation will only happen once and all
		parallel builds will have to wait for it to complete.
		-->
		<MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)"
			Properties="Configuration=NOT_IMPORTANT;DownloadNuGetExe=$(DownloadNuGetExe)" />
	</Target>

	<Target Name="_DownloadNuGet" Condition=" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')">
		<DownloadNuGet OutputFilename="$(NuGetExePath)"
			Condition="'$(OS)' == 'Windows_NT'" />
		<Exec Command="wget $(NuGetExeUrl) || curl -O -L $(NuGetExeUrl)"
			WorkingDirectory="$(NuGetToolsPath)"
			Condition="'$(OS)' != 'Windows_NT'" />
	</Target>

	<Target Name="RestorePackages" DependsOnTargets="CheckPrerequisites" Condition="$(RestorePackages)">
		<!-- Download NuGet packages specified in the packages.config file of each project -->
		<Exec Command='$(NuGetCommand) restore "$(SolutionPath)"'/>
		<!-- Download packages in packages-common.config. Then download packages in either packages-linux.config or packages-windows.config. -->
		<Exec Command="$(RestoreCommandCommon)"/>
		<Exec Command="$(RestoreCommandPlatformSpecific)"/>
	</Target>

	<UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
		Condition=" '$(OS)' == 'Windows_NT' ">
		<ParameterGroup>
			<OutputFilename ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Net" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				try {
					OutputFilename = Path.GetFullPath(OutputFilename);

					Log.LogMessage("Downloading latest version of nuget.exe...");
					WebClient webClient = new WebClient();
					webClient.DownloadFile("$(NuGetExeUrl)", OutputFilename);

					return true;
				}
				catch (Exception ex) {
					Log.LogErrorFromException(ex);
					return false;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
