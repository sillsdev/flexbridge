<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="BuildRelease" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">
	<UsingTask TaskName="DownloadFile" AssemblyFile="FwBuildTasks.dll"/>

	<PropertyGroup>
		<MSBuildExtensionTargets>$(RootDir)/packages/MSBuild.Extension.Pack.1.9.0/build/net40/MSBuild.Extension.Pack.targets</MSBuildExtensionTargets>
	</PropertyGroup>
	<!--Import Project="$(MSBuildExtensionTargets)" Condition="Exists('$(MSBuildExtensionTargets)')"/-->

	<!-- ########################################################################################################## -->
	<!-- ### Configuration properties - Review and edit these values as needed.                                 ### -->
	<!-- ########################################################################################################## -->

	<PropertyGroup>
		<CopyrightYear>2017</CopyrightYear>
		<Manufacturer>SIL International</Manufacturer>
		<CertPath>$(RootDir)/../ia.p12</CertPath> <!-- yes, this is outside the repository. BYOCertificate. -->
	</PropertyGroup>

	<Target Name="ReadCertPassFile">
		<ReadLinesFromFile File="$(RootDir)/certpass.txt"> <!-- TODO (Hasso) 2017.09: this probably shouldn't get checked in, either -->
			<Output TaskParameter="Lines" ItemName="CertPass" />
		</ReadLinesFromFile>
	</Target>

	<!-- ########################################################################################################## -->
	<!-- ### PRODUCT ID GUID definition : This value must be unique for each base build.  Furthermore, every    ### -->
	<!-- ### base build must get its own unique third number (minor version) in the version number sequence.    ### -->
	<!-- ########################################################################################################## -->

	<!-- $(ApplicationName) 1.0.0.X ($(ApplicationName) build)-->
	<PropertyGroup>
		<ProductIdGuid>57942FAA-4E7F-447F-8323-795CEF93FBA1</ProductIdGuid>
	</PropertyGroup>

	<!-- $(ApplicationName) 1.0.1.X ($(ApplicationName) build)-->
	<!-- <PropertyGroup>
	<! -	<ProductIdGuid>E4789AE1-EE7A-4488-88E2-BD3B633DFA1E</ProductIdGuid>
	<! - </PropertyGroup> -->

	<!-- ########################################################################################################## -->
	<!-- ### UPGRADE CODE GUID definition : This value must be the same for every version of this product.      ### -->
	<!-- ### Each product should have its own upgrade code.  This allows installers and patches to upgrade      ### -->
	<!-- ### one another because they share a common upgrade code.                                              ### -->
	<!-- ########################################################################################################## -->
	<PropertyGroup>
		<UpgradeCodeGuid>01D480E3-1EC7-406C-943E-32C721C049A4</UpgradeCodeGuid>
	</PropertyGroup>

	<!-- ########################################################################################################## -->
	<!-- ### CompGGS definition : Component Generation GUID Seed. It's a WiX thing...                           ### -->
	<!-- ### Each product should have its own CompGGS value.                                                    ### -->
	<!-- ########################################################################################################## -->
	<PropertyGroup>
		<CompGGS>02939F49-EAC5-4E88-87CB-0A2A45F80FED</CompGGS>
	</PropertyGroup>

	<!-- ########################################################################################################## -->
	<!-- ### Property definitions                                                                               ### -->
	<!-- ########################################################################################################## -->
	<Target Name="InstallerVersionNumbers" DependsOnTargets="VersionNumbers">
		<!-- parse the version number into segments -->
		<Split Input="$(Version)" Delimiter="." OutputSubString="0">
			<Output TaskParameter="ReturnValue" PropertyName="VersionSeg1"/>
		</Split>
		<Split Input="$(Version)" Delimiter="." OutputSubString="1" ContinueOnError="true">
			<Output TaskParameter="ReturnValue" PropertyName="VersionSeg2"/>
		</Split>
		<Split Input="$(Version)" Delimiter="." OutputSubString="2" ContinueOnError="true">
			<Output TaskParameter="ReturnValue" PropertyName="VersionSeg3"/>
		</Split>
		<Split Input="$(Version)" Delimiter="." OutputSubString="3" ContinueOnError="true">
			<Output TaskParameter="ReturnValue" PropertyName="VersionSeg4"/>
		</Split>
		<PropertyGroup>
			<!-- set default values for trailing version numbers -->
			<VersionSeg2 Condition="'$(VersionSeg2)'==''">0</VersionSeg2>
			<VersionSeg3 Condition="'$(VersionSeg3)'==''">0</VersionSeg3>
			<VersionSeg4 Condition="'$(VersionSeg4)'==''">0</VersionSeg4>

			<!-- REVIEW (Hasso) 2017.09: what do we call each segment again? Major.Minor.(Build|Patch).(Revision|Build) -->
			<MajorVersion>$(VersionSeg1).$(VersionSeg2)</MajorVersion>
			<MinorVersion>$(MajorVersion).$(VersionSeg3)</MinorVersion>
			<Revision>$(MinorVersion).$(VersionSeg4)</Revision>

			<!-- Build Directories -->
			<AppBuildDir>$(InstallersBaseDir)/$(ApplicationName) $(MajorVersion) Build</AppBuildDir>
		</PropertyGroup>
	</Target>

	<!-- Build Directories -->
	<PropertyGroup>
		<InstallersBaseDir>$(RootDir)/BuildDir</InstallersBaseDir>
		<AppBuildMasterDir>$(InstallersBaseDir)/$(ApplicationName) Build Master</AppBuildMasterDir>
	</PropertyGroup>

	<!-- ########################################################################################################## -->
	<!-- ### Top Level Targets                                                                                  ### -->
	<!-- ########################################################################################################## -->

	<!-- called only once, at the first release of a major version -->
	<Target Name="BuildRelease">
		<!--CallTarget Targets="GetDotNetFiles" />-->
		<CallTarget Targets="CleanMasterOutputDir;BuildProductMain;BuildProductBaseMsi;CopyBuildToMaster" />
	</Target>

	<!-- called at each minor release to build both full and patch installers -->
	<Target Name="BuildPatch" DependsOnTargets="BuildProductMain;BuildProductPatchMsp" />

	<!-- ########################################################################################################## -->
	<!-- ### Build Targets                                                                                      ### -->
	<!-- ### TODO (Hasso) 2107.10: assimilate with main targets                                                 ### -->
	<!-- ########################################################################################################## -->

	<Target Name="BuildProductMain" DependsOnTargets="Clean;ProductCompile;CopyFilesToInstall" />

	<!-- ########################################################################################################## -->
	<!-- ### Compile Product and Installer Custom Actions                                                       ### -->
	<!-- ########################################################################################################## -->
	<Target Name="ProductCompile" DependsOnTargets="Build">
		<MSBuild Projects="$(RootDir)/src/WiXInstaller/CustomActions/CustomActions.sln" Properties="Configuration=release;Platform=x86" />
	</Target>

	<!-- used by target Clean in FLExBridge.proj -->
	<ItemGroup>
		<OutputFiles Include="$(RootDir)/src/WiXInstaller/CustomActions/CustomActions/bin/**/*"/>
	</ItemGroup>

	<!-- ########################################################################################################## -->
	<!-- ### Build Folders and Copy Targets                                                                     ### -->
	<!-- ########################################################################################################## -->

	<Target Name="CleanMasterOutputDir">
		<RemoveDir Directories="$(AppBuildMasterDir)" />
	</Target>

	<Target Name="CopyFilesToInstall" DependsOnTargets="InstallerVersionNumbers">
		<!-- prepare the directory -->
		<MakeDir Directories="$(InstallersBaseDir)" Condition="!Exists('$(InstallersBaseDir)')"/>  <!-- ./BuildDir -->
		<RemoveDir Directories="$(AppBuildDir)" />	<!-- ./BuildDir/$(ApplicationName) 1.0 Build -->
		<!-- copy in new stuff -->
		<ItemGroup>
			<BinFiles Include="$(RootDir)/output/$(Configuration)/**/*"/>
			<DataFiles Include="$(RootDir)/DistFiles/license.rtf"/>
		</ItemGroup>
		<Copy SourceFiles="@(BinFiles)" OverwriteReadonlyFiles="true" DestinationFolder="$(AppBuildDir)/objects/$(ApplicationName)"/>
		<Copy SourceFiles="@(DataFiles)" OverwriteReadonlyFiles="true" DestinationFolder="$(AppBuildDir)/objects/$(ApplicationName) Data Folder"/>
	</Target>

	<Target Name="CopyBuildToMaster" DependsOnTargets="InstallerVersionNumbers">
		<ItemGroup>
			<ObjectFiles Include="$(AppBuildDir)/objects/**/*"/>
		</ItemGroup>
		<Copy SourceFiles="@(ObjectFiles)" DestinationFolder="$(AppBuildMasterDir)"/>
	</Target>

	<Target Name="GetDotNetFiles" >
		<PropertyGroup>
			<WixLibsDir>$(RootDir)/src/WiXInstaller/libs</WixLibsDir>
		</PropertyGroup>
		<DownloadFile Address="http://go.microsoft.com/fwlink/?LinkId=322115"
			LocalFilename="$(WixLibsDir)/NDP451-KB2858728-x86-x64-AllOS-ENU.exe"
			Condition="!Exists('$(WixLibsDir)/NDP451-KB2858728-x86-x64-AllOS-ENU.exe')"/> <!-- .net 4.5.1 -->
		<DownloadFile Address="https://download.microsoft.com/download/5/B/C/5BC5DBB3-652D-4DCE-B14A-475AB85EEF6E/vcredist_x86.exe"
			LocalFilename="$(WixLibsDir)/vcredist_x86.exe"
			Condition="!Exists('$(WixLibsDir)/vcredist_x86.exe')"/>			<!-- VisualC++ 10 runtime -->
		<DownloadFile Address="https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x86.exe"
			LocalFilename="$(WixLibsDir)/vcredist_2012_x86.exe"
			Condition="!Exists('$(WixLibsDir)/vcredist_2012_x86.exe')"/>	<!-- VisualC++ 11 runtime -->
		<DownloadFile Address="http://download.microsoft.com/download/0/5/6/056dcda9-d667-4e27-8001-8a0c6971d6b1/vcredist_x86.exe"
			LocalFilename="$(WixLibsDir)/vcredist_2013_x86.exe"
			Condition="!Exists('$(WixLibsDir)/vcredist_2013_x86.exe')"/>	<!-- VisualC++ 12 runtime -->
	</Target>

	<!-- ########################################################################################################## -->
	<!-- ### Download FwBuildTasks; needed for cross-platform DownloadFile task.                                ### -->
	<!-- ### NB (Hasso) 2017.10: this is *super* important, since WiX is for Windows :P                         ### -->
	<!-- ########################################################################################################## -->
	
	<PropertyGroup>
		<FwBuildTasksUrl>https://github.com/sillsdev/FieldWorks/raw/master/Build/FwBuildTasks.dll</FwBuildTasksUrl>
		<FwBuildTasksPath>$(RootDir)/FwBuildTasks.dll</FwBuildTasksPath>
	</PropertyGroup>

	<Target Name="DownloadBuildTasks" Condition="!Exists($(FwBuildTasksPath))">
		<DownloadFileOnWindows Address="$(FwBuildTasksUrl)" OutputFilename="$(FwBuildTasksPath)" Condition="'$(OS)' == 'Windows_NT'" />
		<Exec Command="wget -O $(FwBuildTasksPath) $(FwBuildTasksUrl) || curl -o $(FwBuildTasksPath) -L $(FwBuildTasksUrl)" Condition="'$(OS)' != 'Windows_NT'" />
	</Target>

	<UsingTask TaskName="DownloadFileOnWindows" TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" Condition=" '$(OS)' == 'Windows_NT' ">
		<ParameterGroup>
			<Address ParameterType="System.String" Required="true" />
			<OutputFilename ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Net" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				try
				{
					OutputFilename = Path.GetFullPath(OutputFilename);

					Log.LogMessage(string.Format("Downloading {0}...", Path.GetFileName(OutputFilename)));
					using (var webClient = new WebClient())
					{
						webClient.DownloadFile(Address, OutputFilename);
					}
					return true;
				}
				catch (Exception ex)
				{
					Log.LogErrorFromException(ex);
					return false;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- ########################################################################################################## -->
	<!-- ### Build Wix Product Targets                                                                          ### -->
	<!-- ########################################################################################################## -->

	<Target Name="BuildProductBaseMsi" DependsOnTargets="ReadCertPassFile; InstallerVersionNumbers">
		<PropertyGroup>
			<MsiFile>$(ApplicationName)_$(Revision).msi</MsiFile>
			<BaseBuildDir>$(RootDir)/src/WiXInstaller/BaseInstallerBuild</BaseBuildDir>
			<!-- REVIEW (Hasso) 2017.10: $(AppBuildDir)/objects/$(ApplicationName) deserves a variable -->
			<BaseBuildArgs><![CDATA["$(ApplicationName)" $(Revision) $(ProductIdGuid) $(UpgradeCodeGuid) "$(AppBuildDir)/objects/$(ApplicationName)" "$(AppBuildDir)/objects/$(ApplicationName) Data Folder" "$(CertPath)" "@(CertPass)" $(CopyrightYear) "$(Manufacturer)"]]></BaseBuildArgs>
		</PropertyGroup>
		<Exec WorkingDirectory="$(BaseBuildDir)" Command="buildBaseInstaller.bat $(BaseBuildArgs)" />

		<ItemGroup>
			<InstallerFiles Include="$(BaseBuildDir)/**/$(ApplicationName)_*.exe"/>
			<InstallerFiles Include="$(BaseBuildDir)/**/$(ApplicationName)_*.msi"/>
		</ItemGroup>
		<Move SourceFiles="@(InstallerFiles)" DestinationFolder="$(InstallersBaseDir)"/>
	</Target>

	<Target Name="BuildProductPatchMsp" DependsOnTargets="ReadCertPassFile; InstallerVersionNumbers">
		<!-- TODO (Hasso) 2017.10: ensure this file exists -->
		<ReadLinesFromFile File="$(AppBuildMasterDir)/objects/$(ApplicationName)/CurrentVersion.number">
			<Output TaskParameter="Lines" ItemName="BaseVersion" />
		</ReadLinesFromFile>
		<PropertyGroup>
			<MspFile>$(ApplicationName)_$(Revision).msp</MspFile>
			<PatchDir>$(RootDir)/src/WiXInstaller/CreateUpdatePatch</PatchDir>
			<PatchArgs><![CDATA["$(ApplicationName)" @(BaseVersion) $(Revision) "$(AppBuildMasterDir)/objects/$(ApplicationName)" "$(AppBuildDir)/objects/$(ApplicationName)" "$(AppBuildMasterDir)/objects/$(ApplicationName) Data Folder" "$(AppBuildDir)/objects/$(ApplicationName) Data Folder" $(ProductIdGuid) $(UpgradeCodeGuid) $(CompGGS) "$(CertPath)" "@(CertPass)" "$(Manufacturer)"]]></PatchArgs>
		</PropertyGroup>

		<Exec WorkingDirectory="$(PatchDir)" Command="buildPatch.bat $(PatchArgs)"/>

		<ItemGroup>
			<PatchFiles Include="$(PatchDir)/**/*.msp"/>
		</ItemGroup>
		<Move SourceFiles="" DestinationFolder="$(InstallersBaseDir)"/>
	</Target>
</Project>
