<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build;Pack">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' == '' And '$(RootDir)'==''">$(MSBuildProjectDirectory)/..</RootDir>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' != ''">$(teamcity_build_checkoutDir)</RootDir>
		<Configuration Condition="'$(Configuration)'==''">Debug</Configuration>
		<Platform Condition="'$(Platform)'==''">Any CPU</Platform>
		<Solution>FLExBridge.sln</Solution>
		<ApplicationName>FLEx Bridge</ApplicationName>
		<SolutionPath>$(RootDir)/$(Solution)</SolutionPath>
		<BUILD_VCS_NUMBER Condition="'$(BUILD_VCS_NUMBER)' == ''">0</BUILD_VCS_NUMBER>
		<BUILD_NUMBER Condition="'$(BUILD_NUMBER)' == ''">0</BUILD_NUMBER>
		<ExtraExcludeCategories Condition="'$(OS)'!='Windows_NT'">KnownMonoIssue,UnknownMonoIssue</ExtraExcludeCategories>
		<ExtraExcludeCategories Condition="'$(teamcity_version)' != ''">SkipOnTeamCity,$(ExtraExcludeCategories)</ExtraExcludeCategories>
		<Release Condition="'$(Release)' == ''">true</Release>
		<RestartBuild Condition="!Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props') Or !Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') Or !Exists('$(RootDir)/packages/SIL.ReleaseTasks/tools/net461/SIL.ReleaseTasks.dll') Or !Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe') Or !Exists('$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props') And Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') And Exists('$(RootDir)/packages/SIL.ReleaseTasks/tools/net461/SIL.ReleaseTasks.dll') And Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe')And Exists('$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll')">false</RestartBuild>
		<IgnoreGitVersionTask Condition="'$(IgnoreGitVersionTask)' == ''">false</IgnoreGitVersionTask>
		<MSBuildTasksTargets>$(RootDir)/packages/MSBuildTasks.1.5.0.235/tools/MSBuild.Community.Tasks.Targets</MSBuildTasksTargets>
		<GetVersion Condition="'$(GetVersion)' == ''">true</GetVersion>
		<WriteVersionInfoToBuildLog Condition="'$(WriteVersionInfoToBuildLog)' == ''">true</WriteVersionInfoToBuildLog>
		<TeamCity Condition="'$(teamcity_version)' != ''">true</TeamCity>
		<TeamCity Condition="'$(teamcity_version)' == ''">false</TeamCity>
	</PropertyGroup>

	<Import Project="$(MSBuildTasksTargets)" Condition="Exists('$(MSBuildTasksTargets)')"/>
	<Import Project="NuGet.targets"/>
	<Import Project="WixPatchableInstaller.targets" Condition="'$(OS)'=='Windows_NT'"/>
	<Import Project="$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props"
		Condition="Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props') And !$(IgnoreGitVersionTask)"/>
	<Import Project="$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.targets"
		Condition="Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.targets') And !$(IgnoreGitVersionTask)"/>
	<Import Project="$(RootDir)/packages/SIL.ReleaseTasks/build/SIL.ReleaseTasks.props"
		Condition="Exists('$(RootDir)/packages/SIL.ReleaseTasks/build/SIL.ReleaseTasks.props')" />

	<UsingTask TaskName="Split" AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll" Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')"/>
	<UsingTask TaskName="SIL.BuildTasks.FileUpdate" AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll" Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')"/>
	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll" Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') And '$(OS)'=='Windows_NT'"/>
	<UsingTask TaskName="NUnit3"
		AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll"
		Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')" />
	<UsingTask TaskName="Dependencies" AssemblyFile="$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll" Condition="Exists('$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll')"/>

	<!-- a few do-nothing targets to get rid of some warnings from GitVersion.MsBuild.targets -->
	<Target Name="GetAssemblyVersion"/>
	<Target Name="GenerateNuspec"/>
	<Target Name="_GenerateRestoreProjectSpec"/>
	<Target Name="CoreCompile"/>

	<!-- ***************** Main build ***************** -->

	<Target Name="Build">
		<CallTarget Targets="RestoreBuildTasks"/>
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal"
			Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="BuildInternal" DependsOnTargets="Clean;CreateDirectories;SetAssemblyVersion;Compile;CopyAbout">
		<!-- CallTarget doesn't work well in xbuild.  Variable assignments don't pass out,
		 but it remembers not to call targets a second time via dependencies. -->
		<Message Text="Build Complete"/>
	</Target>

	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites" BeforeTargets="RestorePackages">
		<Message Text="RestartBuild=$(RestartBuild)"/>
		<Exec Command='$(NuGetCommand) install GitVersion.MsBuild -excludeVersion -version 5.6.9 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -version 2.5.0 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.ReleaseTasks -excludeVersion -version 2.5.0 -solutionDirectory "$(RootDir)"' />
		<!-- Install NUnit.Console which has the required extensions as dependencies -->
		<Exec Command='$(NuGetCommand) install NUnit.Console -excludeVersion -version 3.12.0 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install BuildDependencyTasks -excludeVersion -version 0.4.3 -solutionDirectory "$(RootDir)"' />
	</Target>

	<Target Name="DownloadDependencies" DependsOnTargets="RestoreBuildTasks">
		<Dependencies DependencyFile="FLExBridge.dep" UseDependencyFile="true"
			KeepJobsFile="true" WorkingDir="$(RootDir)" />
	</Target>

	<ItemGroup>
		<ObjFiles Include="$(RootDir)/**/obj/*" Exclude="$(RootDir)/.git/**/*"/>
		<OutputDirectories Include="$(RootDir)/output/"/>
	</ItemGroup>

	<Target Name="Clean">
		<Message Text="Starting Clean"/>
		<Delete Condition="'$(OS)'=='Windows_NT' OR $(MSBuildToolsVersion) &gt;= 15"
			 Files="@(ObjFiles)" />
		<Exec Condition="'$(OS)'!='Windows_NT' AND $(MSBuildToolsVersion) &lt; 15"
			Command="find . -name obj -type d -print0 | xargs -0 rm -rf"
			WorkingDirectory="$(RootDir)" />
		<RemoveDir Directories="@(OutputDirectories)"/>
		<Message Text="End Clean"/>
	</Target>

	<Target Name="CreateDirectories">
		<MakeDir Directories="$(RootDir)/output/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/localizations/"/>
	</Target>

	<ItemGroup>
		<EnchantFiles Include="$(RootDir)/lib/common/Enchant.Net.dll*"/>
		<LocalizeFiles Include="$(RootDir)/DistFiles/localizations/*.xlf"/>
		<!-- NDeskDbus is required only so that Palaso can be localized on linux -->
		<NDeskDBusFiles Include="$(RootDir)/lib/$(Configuration)/NDesk.DBus.dll*"/>
		<ChorusHubFiles Include="$(RootDir)/lib/$(Configuration)/ChorusHub.*"/>
		<ConfigFiles Include="$(RootDir)/lib/$(Configuration)/*.dll.config"/>
		<GeckoBrowserFiles Include="$(RootDir)/lib/$(Configuration)/SIL.Windows.Forms.GeckoBrowserAdapter.dll*"/>
	</ItemGroup>

	<Target Name="CopyExtraFilesToOutput" DependsOnTargets="CopyExtraFilesToOutputWindows;CopyExtraFilesToOutputLinux"/>

	<Target Name="CopyExtraFilesToOutputLinux" Condition="'$(OS)'!='Windows_NT'">
		<Copy SourceFiles="@(EnchantFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(LocalizeFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/localizations"/>
		<Copy SourceFiles="@(NDeskDBusFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(ChorusHubFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(ConfigFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(GeckoBrowserFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
	</Target>

	<Target Name="CopyExtraFilesToOutputWindows" Condition="'$(OS)'=='Windows_NT'">
		<Copy SourceFiles="@(LocalizeFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/localizations"/>
	</Target>

	<Target Name="Compile" DependsOnTargets="CopyExtraFilesToOutput; RestorePackages; DownloadDependencies">
		<MSBuild Projects="$(RootDir)/$(Solution)" Targets="Build" Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)"/>
	</Target>

	<Target Name="CopyAbout" DependsOnTargets="SetAssemblyVersion">
		<Copy SourceFiles="$(RootDir)/output/Installer/about.htm" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
	</Target>

	<Target Name="VersionNumbers" DependsOnTargets="RestoreBuildTasks;GetVersion">
		<WriteLinesToFile File="$(RootDir)/gitversion.properties" Overwrite="true"
			Lines="BuildVersion=$(GitVersion_SemVer).$(BUILD_NUMBER)"
			Condition="$(GetVersion)"/>
	</Target>

	<Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
		<!-- Copy these so we aren't modifying the original, which then is a pain on dev machines. -->
		<Copy SourceFiles="$(RootDir)/DistFiles/about.htm"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<Message Text="Version=$(Version),BUILD_VCS_NUMBER=$(BUILD_VCS_NUMBER)"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/about.htm"
			DatePlaceholder="DEV_RELEASE_DATE" Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/about.htm" DateFormat="yyyy" DatePlaceholder="DEV_RELEASE_YEAR"
			Regex="FBCOMMITID" ReplacementText="$(BUILD_VCS_NUMBER)"/>

		<Copy SourceFiles="$(RootDir)/DistFiles/License.htm"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/License.htm"
			DatePlaceholder="DEV_RELEASE_DATE" Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/License.htm"
			DateFormat="yyyy" DatePlaceholder="DEV_RELEASE_YEAR"
			Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
			<!-- The FileUpdate task checks whether ReplacementText is in the updated file contents before writing the contents back to the file, but we need to replace two dates and only one Regex, so we call FileUpdate twice with the same Regex and ReplacementText. -->

		<Copy SourceFiles="$(RootDir)/src/Installer/appcast.xml"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/appcast.xml"
			Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
	</Target>

	<Target Name="PreparePublishingArtifacts">
		<CallTarget Targets="RestoreBuildTasks"/>
		<CallTarget Targets="PreparePublishingArtifactsInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="PreparePublishingArtifactsInternal"
			Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="PreparePublishingArtifactsInternal" DependsOnTargets="VersionNumbers; CheckPreRequisites">
		<StampChangelogFileWithVersion ChangelogFile="$(RootDir)/CHANGELOG.md"
			VersionNumber="$(Version)" />
		<CreateReleaseNotesHtml ChangelogFile="$(RootDir)/CHANGELOG.md"
			HtmlFile="$(RootDir)/src/Installer/$(UploadFolder).htm" />
		<CreateChangelogEntry ChangelogFile="$(RootDir)/CHANGELOG.md"
			VersionNumber="$(Version)" PackageName="flexbridge"
			DebianChangelog="$(RootDir)/debian/changelog"
			MaintainerInfo="Jason Naylor &lt;jason_naylor@sil.org&gt;" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<CallTarget Targets="TestOnly" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="TestOnly" Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)" Condition="$(RestartBuild)" />
	</Target>

	<Target Name="TestOnly" >
		<ItemGroup>
			<TestAssemblies Include="$(RootDir)/output/$(Configuration)/net461/*Tests.dll" />
		</ItemGroup>

		<NUnit3 Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner/tools"
			TestInNewThread="false"
			ExcludeCategory="$(ExtraExcludeCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)/net461"
			Process="single"
			Verbose="true"
			UseNUnit3Xml="false"
			OutputXmlFile="$(RootDir)/output/$(Configuration)/net461/TestResults.xml"
			TeamCity="$(TeamCity)"/>
	</Target>

	<Target Name="Pack" DependsOnTargets="RestorePackages">
		<MSBuild
			Projects="$(SolutionPath)"
			Targets="pack"
			Properties="Configuration=$(Configuration)" />
	</Target>

	<!-- *********************** Installer stuff below.  ******************************* -->

	<!-- For building an an installer on TeamCity (use TestInstallerBuild.bat to run locally) -->
	<Target Name="Installer" DependsOnTargets="VersionNumbers; BuildRelease; Test" Condition="'$(OS)'=='Windows_NT'"/>
	<Target Name="Patcher" DependsOnTargets="VersionNumbers; BuildPatch; Test" Condition="'$(OS)'=='Windows_NT'"/>

	<!-- update the AssemblyInfo files for linux packaging -->
	<Target Name="UpdateAssemblyInfoForPackage">
		<Exec Command="for f in `find $(RootDir) -name packages.config -print0 | xargs -0 grep --files-with-matches GitVersion`; do dir=`dirname $f`; msbuild /t:UpdateAssemblyInfo /p:IntermediateOutputPath=Properties $dir/`basename $dir`.csproj; done" />
	</Target>
</Project>
