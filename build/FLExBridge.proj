<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build;Pack">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' == '' And '$(RootDir)'==''">$(MSBuildProjectDirectory)/..</RootDir>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' != ''">$(teamcity_build_checkoutDir)</RootDir>
		<Configuration Condition="'$(Configuration)'==''">Debug</Configuration>
		<Platform Condition="'$(Platform)'==''">Any CPU</Platform>
		<Solution>FLExBridge.sln</Solution>
		<ApplicationName>FLEx Bridge</ApplicationName>
		<SolutionPath>$(RootDir)/$(Solution)</SolutionPath>
		<BUILD_VCS_NUMBER Condition="'$(BUILD_VCS_NUMBER)' == ''">0</BUILD_VCS_NUMBER>
		<BUILD_NUMBER Condition="'$(BUILD_NUMBER)' == ''">0</BUILD_NUMBER>
		<ExtraExcludeCategories Condition="'$(OS)'!='Windows_NT'">KnownMonoIssue,UnknownMonoIssue</ExtraExcludeCategories>
		<ExtraExcludeCategories Condition="'$(teamcity_version)' != ''">SkipOnTeamCity,$(ExtraExcludeCategories)</ExtraExcludeCategories>
		<Release Condition="'$(Release)' == ''">true</Release>
		<RestartBuild Condition="!Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props') Or !Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') Or !Exists('$(RootDir)/packages/SIL.ReleaseTasks/tools/net461/SIL.ReleaseTasks.dll') Or !Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe') Or !Exists('$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props') And Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') And Exists('$(RootDir)/packages/SIL.ReleaseTasks/tools/net461/SIL.ReleaseTasks.dll') And Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe')And Exists('$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll')">false</RestartBuild>
		<IgnoreGitVersionTask Condition="'$(IgnoreGitVersionTask)' == ''">false</IgnoreGitVersionTask>
		<MSBuildTasksTargets>$(RootDir)/packages/MSBuildTasks.1.5.0.235/tools/MSBuild.Community.Tasks.Targets</MSBuildTasksTargets>
		<GetVersion Condition="'$(GetVersion)' == ''">true</GetVersion>
		<WriteVersionInfoToBuildLog Condition="'$(WriteVersionInfoToBuildLog)' == ''">true</WriteVersionInfoToBuildLog>
		<TeamCity Condition="'$(teamcity_version)' != ''">true</TeamCity>
		<TeamCity Condition="'$(teamcity_version)' == ''">false</TeamCity>
	</PropertyGroup>

	<Import Project="$(MSBuildTasksTargets)" Condition="Exists('$(MSBuildTasksTargets)')"/>
	<Import Project="NuGet.targets"/>
	<Import Project="WixPatchableInstaller.targets" Condition="'$(OS)'=='Windows_NT'"/>
	<Import Project="$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props"
		Condition="Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.props') And !$(IgnoreGitVersionTask)"/>
	<Import Project="$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.targets"
		Condition="Exists('$(RootDir)/packages/GitVersion.MsBuild/build/GitVersion.MsBuild.targets') And !$(IgnoreGitVersionTask)"/>
	<Import Project="$(RootDir)/packages/SIL.ReleaseTasks/build/SIL.ReleaseTasks.props"
		Condition="Exists('$(RootDir)/packages/SIL.ReleaseTasks/build/SIL.ReleaseTasks.props')" />

	<UsingTask TaskName="Split" AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll" Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')"/>
	<UsingTask TaskName="SIL.BuildTasks.FileUpdate" AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll" Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')"/>
	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll" Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') And '$(OS)'=='Windows_NT'"/>
	<UsingTask TaskName="NUnit3"
		AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll"
		Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')" />
	<UsingTask TaskName="Dependencies" AssemblyFile="$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll" Condition="Exists('$(RootDir)/packages/BuildDependencyTasks/BuildDependencyTasks.dll')"/>

	<!-- a few do-nothing targets to get rid of some warnings from GitVersion.MsBuild.targets -->
	<Target Name="GetAssemblyVersion"/>
	<Target Name="GenerateNuspec"/>
	<Target Name="_GenerateRestoreProjectSpec"/>
	<Target Name="CoreCompile"/>

	<!-- ***************** Main build ***************** -->

	<Target Name="Build">
		<CallTarget Targets="RestoreBuildTasks"/>
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal"
			Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="BuildInternal" DependsOnTargets="Clean;CreateDirectories;SetAssemblyVersion;Compile;CopyAbout">
		<!-- CallTarget doesn't work well in xbuild.  Variable assignments don't pass out,
		 but it remembers not to call targets a second time via dependencies. -->
		<Message Text="Build Complete"/>
	</Target>

	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites" BeforeTargets="RestorePackages">
		<Message Text="RestartBuild=$(RestartBuild)"/>
		<Exec Command='$(NuGetCommand) install GitVersion.MsBuild -excludeVersion -version 5.6.10 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -version 2.5.0 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.ReleaseTasks -excludeVersion -version 2.5.0 -solutionDirectory "$(RootDir)"' />
		<!-- Install NUnit.Console which has the required extensions as dependencies -->
		<Exec Command='$(NuGetCommand) install NUnit.Console -excludeVersion -version 3.12.0 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install BuildDependencyTasks -excludeVersion -version 0.4.3 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.Windows.Forms.GeckoBrowserAdapter -version 8.0.0 -solutionDirectory "$(RootDir)"' Condition="'$(OS)'!='Windows_NT'"/>
	</Target>

	<Target Name="DownloadDependencies" DependsOnTargets="RestoreBuildTasks">
		<Dependencies DependencyFile="FLExBridge.dep" UseDependencyFile="true"
			KeepJobsFile="true" WorkingDir="$(RootDir)" />
	</Target>

	<ItemGroup>
		<ObjFiles Include="$(RootDir)/**/obj/*" Exclude="$(RootDir)/.git/**/*"/>
		<OutputDirectories Include="$(RootDir)/output/"/>
	</ItemGroup>

	<Target Name="Clean">
		<Message Text="Starting Clean"/>
		<Delete Condition="'$(OS)'=='Windows_NT' OR $(MSBuildToolsVersion) &gt;= 15"
			 Files="@(ObjFiles)" />
		<Exec Condition="'$(OS)'!='Windows_NT' AND $(MSBuildToolsVersion) &lt; 15"
			Command="find . -name obj -type d -print0 | xargs -0 rm -rf"
			WorkingDirectory="$(RootDir)" />
		<RemoveDir Directories="@(OutputDirectories)"/>
		<Message Text="End Clean"/>
	</Target>

	<Target Name="CreateDirectories">
		<MakeDir Directories="$(RootDir)/output/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/net461/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/net461/localizations/"/>
	</Target>

	<ItemGroup>
		<EnchantFiles Include="$(RootDir)/lib/common/Enchant.Net.dll*"/>
		<LocalizeFiles Include="$(RootDir)/DistFiles/localizations/*.xlf"/>
		<!-- NDeskDbus is required only so that Palaso can be localized on linux -->
		<NDeskDBusFiles Include="$(RootDir)/lib/$(Configuration)/NDesk.DBus.dll*"/>
		<ChorusHubFiles Include="$(RootDir)/lib/$(Configuration)/ChorusHub.*"/>
		<ConfigFiles Include="$(RootDir)/lib/$(Configuration)/*.dll.config"/>
		<GeckoBrowserFiles Include="$(RootDir)/packages/SIL.Windows.Forms.GeckoBrowserAdapter.8.0.0/lib/net461/SIL.Windows.Forms.GeckoBrowserAdapter.dll.*"/>
		<LinuxLauncherFiles Include="$(RootDir)/flexbridge"/>
	</ItemGroup>

	<Target Name="CopyExtraFilesToOutput" DependsOnTargets="CopyExtraFilesToOutputLinux">
		<Error Text="Localization Files Missing" Condition="'@(LocalizeFiles)' == ''" />
		<Copy SourceFiles="@(LocalizeFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461/localizations"/>
	</Target>

	<Target Name="CopyExtraFilesToOutputLinux" Condition="'$(OS)'!='Windows_NT'">
		<Error Text="GeckoBrowserAdapter Missing" Condition="'@(GeckoBrowserFiles)' == ''" />
		<Copy SourceFiles="@(LinuxLauncherFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
		<Copy SourceFiles="@(EnchantFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
		<Copy SourceFiles="@(NDeskDBusFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
		<Copy SourceFiles="@(ChorusHubFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
		<Copy SourceFiles="@(ConfigFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
		<Copy SourceFiles="@(GeckoBrowserFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
	</Target>

	<Target Name="Compile" DependsOnTargets="CopyExtraFilesToOutput; RestorePackages; DownloadDependencies">
		<MSBuild Projects="$(RootDir)/$(Solution)" Targets="Build" Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)"/>
	</Target>

	<Target Name="CopyAbout" DependsOnTargets="SetAssemblyVersion">
		<Copy SourceFiles="$(RootDir)/output/Installer/about.htm" DestinationFolder="$(RootDir)/output/$(Configuration)/net461"/>
	</Target>

	<Target Name="VersionNumbers" DependsOnTargets="RestoreBuildTasks;GetVersion" Condition="$(GetVersion)">
		<ItemGroup>
			<GitVersionPropsFile Include="$(RootDir)/gitversion.properties"/>
		</ItemGroup>
		<Delete Files="@(GitVersionPropsFile)" />

		<!-- on Jenkins this will create gitversion.properties -->
		<Exec Command="$(GitVersionFileExe) $(RootDir) -output buildserver -updateprojectfiles" WorkingDirectory="$(RootDir)" Condition="'$(BuildingPackage)'!=''" />
		<!-- append build number -->
		<WriteLinesToFile File="$(RootDir)/gitversion.properties" Overwrite="false"
			Lines="BuildVersion=$(GitVersion_SemVer).$(BUILD_NUMBER)" />
	</Target>

	<Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
		<!-- Copy these so we aren't modifying the original, which then is a pain on dev machines. -->
		<Copy SourceFiles="$(RootDir)/DistFiles/about.htm"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<Message Text="Version=$(Version),BUILD_VCS_NUMBER=$(BUILD_VCS_NUMBER)"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/about.htm"
			DatePlaceholder="DEV_RELEASE_DATE" Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/about.htm" DateFormat="yyyy" DatePlaceholder="DEV_RELEASE_YEAR"
			Regex="FBCOMMITID" ReplacementText="$(BUILD_VCS_NUMBER)"/>

		<Copy SourceFiles="$(RootDir)/DistFiles/License.htm"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/License.htm"
			DatePlaceholder="DEV_RELEASE_DATE" Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/License.htm"
			DateFormat="yyyy" DatePlaceholder="DEV_RELEASE_YEAR"
			Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
			<!-- The FileUpdate task checks whether ReplacementText is in the updated file contents before writing the contents back to the file, but we need to replace two dates and only one Regex, so we call FileUpdate twice with the same Regex and ReplacementText. -->

		<Copy SourceFiles="$(RootDir)/src/Installer/appcast.xml"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<SIL.BuildTasks.FileUpdate File="$(RootDir)/output/Installer/appcast.xml"
			Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
	</Target>

	<Target Name="PreparePublishingArtifacts">
		<CallTarget Targets="RestoreBuildTasks"/>
		<CallTarget Targets="PreparePublishingArtifactsInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="PreparePublishingArtifactsInternal"
			Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="PreparePublishingArtifactsInternal" DependsOnTargets="VersionNumbers; CheckPreRequisites">
		<StampChangelogFileWithVersion ChangelogFile="$(RootDir)/CHANGELOG.md"
			VersionNumber="$(Version)" />
		<CreateReleaseNotesHtml ChangelogFile="$(RootDir)/CHANGELOG.md"
			HtmlFile="$(RootDir)/src/Installer/$(UploadFolder).htm" />
		<CreateChangelogEntry ChangelogFile="$(RootDir)/CHANGELOG.md"
			VersionNumber="$(Version)" PackageName="flexbridge"
			DebianChangelog="$(RootDir)/debian/changelog"
			MaintainerInfo="Jason Naylor &lt;jason_naylor@sil.org&gt;" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<CallTarget Targets="TestOnly" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="TestOnly" Properties="Configuration=$(Configuration);GetVersion=$(GetVersion);WriteVersionInfoToBuildLog=$(WriteVersionInfoToBuildLog)" Condition="$(RestartBuild)" />
	</Target>

	<Target Name="TestOnly" >
		<ItemGroup>
			<TestAssemblies Include="$(RootDir)/output/$(Configuration)/net461/*Tests.dll" />
		</ItemGroup>

		<NUnit3 Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner/tools"
			TestInNewThread="false"
			ExcludeCategory="$(ExtraExcludeCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)/net461"
			Process="single"
			Verbose="true"
			UseNUnit3Xml="false"
			OutputXmlFile="$(RootDir)/output/$(Configuration)/net461/TestResults.xml"
			TeamCity="$(TeamCity)"/>
	</Target>

	<Target Name="Pack" DependsOnTargets="RestorePackages">
		<MSBuild
			Projects="$(SolutionPath)"
			Targets="pack"
			Properties="Configuration=$(Configuration)" />
	</Target>

	<!-- *********************** Installer stuff below.  ******************************* -->

	<!-- For building an an installer on TeamCity (use TestInstallerBuild.bat to run locally) -->
	<Target Name="Installer" DependsOnTargets="VersionNumbers; BuildRelease; Test" Condition="'$(OS)'=='Windows_NT'"/>
	<Target Name="Patcher" DependsOnTargets="VersionNumbers; BuildPatch; Test" Condition="'$(OS)'=='Windows_NT'"/>

	<!-- When package building we don't a .git subdirectory, so can't run GitVersion directly.
		Instead we did run it when creating the source package, so we now have a gitversion.json
		file that contains all relevant values. Usually this file gets read by the GetVersion
		target, but that only works if we also run gitversion itself. So instead we duplicate
		that target here. -->
	<Target Name="SetVersionProperties">
	   <GetVersion SolutionDirectory="$(GitVersionPath)" VersionFile="$(GitVersionOutputFile)">
			<Output TaskParameter="Major" PropertyName="GitVersion_Major" />
			<Output TaskParameter="Minor" PropertyName="GitVersion_Minor" />
			<Output TaskParameter="Patch" PropertyName="GitVersion_Patch" />
			<Output TaskParameter="PreReleaseTag" PropertyName="GitVersion_PreReleaseTag" />
			<Output TaskParameter="PreReleaseTagWithDash" PropertyName="GitVersion_PreReleaseTagWithDash" />
			<Output TaskParameter="PreReleaseLabel" PropertyName="GitVersion_PreReleaseLabel" />
			<Output TaskParameter="PreReleaseLabelWithDash" PropertyName="GitVersion_PreReleaseLabelWithDash" />
			<Output TaskParameter="PreReleaseNumber" PropertyName="GitVersion_PreReleaseNumber" />
			<Output TaskParameter="WeightedPreReleaseNumber" PropertyName="GitVersion_WeightedPreReleaseNumber" />
			<Output TaskParameter="MajorMinorPatch" PropertyName="GitVersion_MajorMinorPatch" />
			<Output TaskParameter="SemVer" PropertyName="GitVersion_SemVer" />
			<Output TaskParameter="LegacySemVer" PropertyName="GitVersion_LegacySemVer" />
			<Output TaskParameter="LegacySemVerPadded" PropertyName="GitVersion_LegacySemVerPadded" />
			<Output TaskParameter="AssemblySemVer" PropertyName="GitVersion_AssemblySemVer" />
			<Output TaskParameter="AssemblySemFileVer" PropertyName="GitVersion_AssemblySemFileVer" />
			<Output TaskParameter="FullSemVer" PropertyName="GitVersion_FullSemVer" />
			<Output TaskParameter="InformationalVersion" PropertyName="GitVersion_InformationalVersion" />
			<Output TaskParameter="BranchName" PropertyName="GitVersion_BranchName" />
			<Output TaskParameter="EscapedBranchName" PropertyName="GitVersion_EscapedBranchName" />
			<Output TaskParameter="Sha" PropertyName="GitVersion_Sha" />
			<Output TaskParameter="ShortSha" PropertyName="GitVersion_ShortSha" />
			<Output TaskParameter="NuGetVersionV2" PropertyName="GitVersion_NuGetVersionV2" />
			<Output TaskParameter="NuGetVersion" PropertyName="GitVersion_NuGetVersion" />
			<Output TaskParameter="NuGetPreReleaseTagV2" PropertyName="GitVersion_NuGetPreReleaseTagV2" />
			<Output TaskParameter="NuGetPreReleaseTag" PropertyName="GitVersion_NuGetPreReleaseTag" />
			<Output TaskParameter="CommitDate" PropertyName="GitVersion_CommitDate" />
			<Output TaskParameter="VersionSourceSha" PropertyName="GitVersion_VersionSourceSha" />
			<Output TaskParameter="CommitsSinceVersionSource" PropertyName="GitVersion_CommitsSinceVersionSource" />
			<Output TaskParameter="CommitsSinceVersionSourcePadded" PropertyName="GitVersion_CommitsSinceVersionSourcePadded" />
			<Output TaskParameter="UncommittedChanges" PropertyName="GitVersion_UncommittedChanges" />
		</GetVersion>

		<PropertyGroup>
			<Version>$(GitVersion_FullSemVer)</Version>
			<VersionPrefix>$(GitVersion_MajorMinorPatch)</VersionPrefix>
			<VersionSuffix Condition=" '$(UseFullSemVerForNuGet)' == 'false' ">$(GitVersion_NuGetPreReleaseTag)</VersionSuffix>
			<VersionSuffix Condition=" '$(UseFullSemVerForNuGet)' == 'true' ">$(GitVersion_PreReleaseTag)</VersionSuffix>
			<PackageVersion Condition=" '$(UseFullSemVerForNuGet)' == 'false' ">$(GitVersion_NuGetVersion)</PackageVersion>
			<PackageVersion Condition=" '$(UseFullSemVerForNuGet)' == 'true' ">$(GitVersion_FullSemVer)</PackageVersion>
			<InformationalVersion Condition=" '$(InformationalVersion)' == '' ">$(GitVersion_InformationalVersion)</InformationalVersion>
			<AssemblyVersion Condition=" '$(AssemblyVersion)' == '' ">$(GitVersion_AssemblySemVer)</AssemblyVersion>
			<FileVersion Condition=" '$(FileVersion)' == '' ">$(GitVersion_AssemblySemFileVer)</FileVersion>
			<RepositoryBranch Condition=" '$(RepositoryBranch)' == '' ">$(GitVersion_BranchName)</RepositoryBranch>
			<RepositoryCommit Condition=" '$(RepositoryCommit)' == '' ">$(GitVersion_Sha)</RepositoryCommit>
		</PropertyGroup>

		<PropertyGroup Condition=" '$(WixTargetsImported)' == 'true' And '$(GenerateGitVersionWixDefines)' == 'true' ">
			<DefineConstants Condition=" '$(GitVersion_Major)' != '' ">GitVersion_Major=$(GitVersion_Major);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_Minor)' != '' ">GitVersion_Minor=$(GitVersion_Minor);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_Patch)' != '' ">GitVersion_Patch=$(GitVersion_Patch);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_PreReleaseTag)' != '' ">GitVersion_PreReleaseTag=$(GitVersion_PreReleaseTag);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_PreReleaseTagWithDash)' != '' ">GitVersion_PreReleaseTagWithDash=$(GitVersion_PreReleaseTagWithDash);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_PreReleaseLabel)' != '' ">GitVersion_PreReleaseLabel=$(GitVersion_PreReleaseLabel);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_PreReleaseLabelWithDash)' != '' ">GitVersion_PreReleaseLabelWithDash=$(GitVersion_PreReleaseLabeWithDashl);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_PreReleaseNumber)' != '' ">GitVersion_PreReleaseNumber=$(GitVersion_PreReleaseNumber);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_WeightedPreReleaseNumber)' != '' ">GitVersion_WeightedPreReleaseNumber=$(GitVersion_WeightedPreReleaseNumber);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_BuildMetaData)' != '' ">GitVersion_BuildMetaData=$(GitVersion_BuildMetaData);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_BuildMetaDataPadded)' != '' ">GitVersion_BuildMetaDataPadded=$(GitVersion_BuildMetaDataPadded);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_FullBuildMetaData)' != '' ">GitVersion_FullBuildMetaData=$(GitVersion_FullBuildMetaData);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_MajorMinorPatch)' != '' ">GitVersion_MajorMinorPatch=$(GitVersion_MajorMinorPatch);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_SemVer)' != '' ">GitVersion_SemVer=$(GitVersion_SemVer);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_LegacySemVer)' != '' ">GitVersion_LegacySemVer=$(GitVersion_LegacySemVer);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_LegacySemVerPadded)' != '' ">GitVersion_LegacySemVerPadded=$(GitVersion_LegacySemVerPadded);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_AssemblySemVer)' != '' ">GitVersion_AssemblySemVer=$(GitVersion_AssemblySemVer);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_AssemblySemFileVer)' != '' ">GitVersion_AssemblySemFileVer=$(GitVersion_AssemblySemFileVer);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_FullSemVer)' != '' ">GitVersion_FullSemVer=$(GitVersion_FullSemVer);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_InformationalVersion)' != '' ">GitVersion_InformationalVersion=$(GitVersion_InformationalVersion);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_BranchName)' != '' ">GitVersion_BranchName=$(GitVersion_BranchName);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_EscapedBranchName)' != '' ">GitVersion_EscapedBranchName=$(GitVersion_EscapedBranchName);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_Sha)' != '' ">GitVersion_Sha=$(GitVersion_Sha);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_ShortSha)' != '' ">GitVersion_ShortSha=$(GitVersion_ShortSha);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_NuGetVersionV2)' != '' ">GitVersion_NuGetVersionV2=$(GitVersion_NuGetVersionV2);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_NuGetVersion)' != '' ">GitVersion_NuGetVersion=$(GitVersion_NuGetVersion);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_NuGetPreReleaseTagV2)' != '' ">GitVersion_NuGetPreReleaseTagV2=$(GitVersion_NuGetPreReleaseTagV2);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_NuGetPreReleaseTag)' != '' ">GitVersion_NuGetPreReleaseTag=$(GitVersion_NuGetPreReleaseTag);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_CommitDate)' != '' ">GitVersion_CommitDate=$(GitVersion_CommitDate);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_VersionSourceSha)' != '' ">GitVersion_VersionSourceSha=$(GitVersion_VersionSourceSha);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_CommitsSinceVersionSource)' != '' ">GitVersion_CommitsSinceVersionSource=$(GitVersion_CommitsSinceVersionSource);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_CommitsSinceVersionSourcePadded)' != '' ">GitVersion_CommitsSinceVersionSourcePadded=$(GitVersion_CommitsSinceVersionSourcePadded);$(DefineConstants)</DefineConstants>
			<DefineConstants Condition=" '$(GitVersion_UncommittedChanges)' != '' ">GitVersion_UncommittedChanges=$(GitVersion_UncommittedChanges);$(DefineConstants)</DefineConstants>
		</PropertyGroup>

		<Message Text="In SetVersionProperties: UpdateVersionProperties=$(UpdateVersionProperties), Version=$(Version)" />
	</Target>

</Project>
