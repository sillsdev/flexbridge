<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' == '' And '$(RootDir)'==''">$(MSBuildProjectDirectory)/..</RootDir>
		<RootDir Condition="'$(teamcity_build_checkoutDir)' != ''">$(teamcity_build_checkoutDir)</RootDir>
		<Configuration Condition="'$(Configuration)'=='' And '$(OS)'=='Windows_NT'">Debug</Configuration>
		<Configuration Condition="'$(Configuration)'=='' And '$(OS)'!='Windows_NT'">DebugMono</Configuration>
		<Platform Condition="'$(Platform)'==''">Any CPU</Platform>
		<Solution>FLExBridge.sln</Solution>
		<ApplicationName>FLEx Bridge</ApplicationName>
		<SolutionPath>$(RootDir)/$(Solution)</SolutionPath>
		<BUILD_VCS_NUMBER Condition="'$(BUILD_VCS_NUMBER)' == ''">0</BUILD_VCS_NUMBER>
		<useNUnit-x86 Condition="'$(OS)'=='Windows_NT'">true</useNUnit-x86>
		<useNUnit-x86 Condition="'$(OS)'!='Windows_NT'">false</useNUnit-x86>
		<ExtraExcludeCategories Condition="'$(OS)'!='Windows_NT'">KnownMonoIssue,UnknownMonoIssue</ExtraExcludeCategories>
		<ExtraExcludeCategories Condition="'$(teamcity_version)' != ''">SkipOnTeamCity,$(ExtraExcludeCategories)</ExtraExcludeCategories>
		<Release Condition="'$(Release)' == ''">true</Release>
		<RestartBuild Condition="!Exists('$(RootDir)/packages/GitVersionTask/build/GitVersionTask.dll')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(RootDir)/packages/GitVersionTask/build/GitVersionTask.dll')">false</RestartBuild>
		<IgnoreGitVersionTask Condition="'$(IgnoreGitVersionTask)' == ''">false</IgnoreGitVersionTask>
	</PropertyGroup>

	<UsingTask TaskName="Split" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll"/>
	<UsingTask TaskName="FileUpdate" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll"/>
	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll"
		Condition="'$(OS)'=='Windows_NT'"/>
	<UsingTask TaskName="GenerateReleaseArtifacts" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll"/>
	<UsingTask TaskName="NUnit" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll" />
	<UsingTask TaskName="NUnitTeamCity"
		AssemblyFile="$(agent_home_dir)/plugins/dotnetPlugin/bin/JetBrains.BuildServer.MSBuildLoggers.dll"
		Condition=" '$(teamcity_version)' != '' And '$(OS)'!='Windows_NT'"/>
	<UsingTask TaskName="NUnitTeamCity"
		AssemblyFile="$(teamcity_dotnet_nunitlauncher_msbuild_task)"
		Condition=" '$(teamcity_version)' != '' And '$(OS)'=='Windows_NT'"/>

	<PropertyGroup>
		<MSBuildTasksTargets>..\packages\MSBuildTasks.1.5.0.235\tools\MSBuild.Community.Tasks.Targets</MSBuildTasksTargets>
	</PropertyGroup>

	<Import Project="$(MSBuildTasksTargets)" Condition="Exists('$(MSBuildTasksTargets)')"/>
	<Import Project="NuGet.targets"/>
	<Import Project="WixPatchableInstaller.targets" Condition="'$(OS)'=='Windows_NT'"/>
	<Import Project="$(MSBuildProjectDirectory)/packages/GitVersionTask/build/GitVersionTask.targets"
		Condition="Exists('$(MSBuildProjectDirectory)/packages/GitVersionTask/build/GitVersionTask.targets') And !$(IgnoreGitVersionTask)"/>

	<!-- a few do-nothing targets to get rid of some warnings from GitVersionTask.targets -->
	<Target Name="GetAssemblyVersion"/>
	<Target Name="GenerateNuspec"/>
	<Target Name="_GenerateRestoreProjectSpec"/>
	<Target Name="CoreCompile"/>

	<!-- ***************** Main build ***************** -->

	<Target Name="Build">
		<CallTarget Targets="RestoreBuildTasks"/>
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal" Properties="Configuration=$(Configuration)" Condition="$(RestartBuild)" />
	</Target>

	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites">
		<Message Text="RestartBuild=$(RestartBuild)"/>
		<Exec Command='$(NuGetCommand) install GitVersionTask -excludeVersion -version 4.0.0-beta0012 -source "$(PackageSources)" -solutionDirectory "$(MSBuildProjectDirectory)/."' />
	</Target>

	<Target Name="BuildInternal" DependsOnTargets="Clean;CreateDirectories;SetAssemblyVersion;UnzipMercurial;Compile;CopyAbout">
		<!-- CallTarget doesn't work well in xbuild.  Variable assignments don't pass out,
		 but it remembers not to call targets a second time via dependencies. -->
		<Message Text="Build Complete"/>
	</Target>

	<ItemGroup>
		<ObjFiles Include="$(RootDir)/**/obj/*" Exclude="$(RootDir)/.git/**/*"/>
		<OutputDirectories Include="$(RootDir)/output/"/>
	</ItemGroup>

	<Target Name="Clean">
		<Message Text="Starting Clean"/>
		<Exec Command="find . -name obj -type d -print0 | xargs -0 rm -rf" WorkingDirectory="$(RootDir)"
			Condition="'$(OS)'!='Windows_NT'"/>
		<Delete Files="@(ObjFiles)" Condition="'$(OS)'=='Windows_NT'" />
		<RemoveDir Directories="@(OutputDirectories)"/>
		<Message Text="End Clean"/>
	</Target>

	<Target Name="CreateDirectories">
		<MakeDir Directories="$(RootDir)/output/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/"/>
		<MakeDir Directories="$(RootDir)/output/$(Configuration)/localizations/"/>
	</Target>

	<Target Name="UnzipMercurial" DependsOnTargets="UnzipMercurialWindows;UnzipMercurialLinux"/>

	<Target Name="UnzipMercurialWindows" Condition="'$(OS)'=='Windows_NT'">
		<!-- Extract a zip file-->
		<Unzip ZipFileName="$(RootDir)\lib\$(Configuration)\Mercurial.zip" TargetDirectory="$(RootDir)"/>
	</Target>
	<Target Name="UnzipMercurialLinux" Condition="'$(OS)'!='Windows_NT'">
		<!-- Remember, Unix/Linux commands return 0 for success ("true") -->
		<Exec Command="/usr/bin/test `arch` = x86_64" ContinueOnError="true" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="ZeroIf64BitCpu"/>
		</Exec>
		<Exec Command="/usr/bin/test `arch` = i686" ContinueOnError="true" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="ZeroIf32BitCpu"/>
		</Exec>
		<!-- Extract the appropriate zip file. -->
		<Exec Command="/bin/rm -rf ../Mercurial" />
		<Exec Condition="'$(ZeroIf64BitCpu)'=='0'"
			Command="/usr/bin/unzip -uq $(RootDir)/lib/$(Configuration)/Mercurial-x86_64.zip -d $(RootDir)" />
		<Exec Condition="'$(ZeroIf32BitCpu)'=='0'"
			Command="/usr/bin/unzip -uq $(RootDir)/lib/$(Configuration)/Mercurial-i686.zip -d $(RootDir)" />
		<!-- Zip doesn't seem to retain the permission bits we need. -->
		<Exec Command="/bin/chmod +x $(RootDir)/Mercurial/hg*" ContinueOnError="true"/>
	</Target>

	<ItemGroup>
		<EnchantFiles Include="$(RootDir)/lib/common/Enchant.Net.dll*"/>
		<IcuDotNetFiles Include="$(RootDir)/lib/$(Configuration)/icu.net.dll*"/>
		<LocalizeFiles Include="$(RootDir)/DistFiles/localizations/*"/>
		<!-- NDeskDbus is required only so that Palaso can be localized on linux -->
		<NDeskDBusFiles Include="$(RootDir)/lib/$(Configuration)/NDesk.DBus.dll*"/>
		<ChorusHubFiles Include="$(RootDir)/lib/$(Configuration)/ChorusHub.*"/>
		<ConfigFiles Include="$(RootDir)/lib/$(Configuration)/*.dll.config"/>
		<GeckoBrowserFiles Include="$(RootDir)/lib/$(Configuration)/SIL.Windows.Forms.GeckoBrowserAdapter.dll*"/>
	</ItemGroup>

	<Target Name="CopyExtraFilesToOutput" DependsOnTargets="CopyExtraFilesToOutputWindows;CopyExtraFilesToOutputLinux"/>

	<Target Name="CopyExtraFilesToOutputLinux" Condition="'$(OS)'!='Windows_NT'">
		<Copy SourceFiles="@(EnchantFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(IcuDotNetFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(LocalizeFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/localizations"/>
		<Copy SourceFiles="@(NDeskDBusFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(ChorusHubFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(ConfigFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
		<Copy SourceFiles="@(GeckoBrowserFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
	</Target>

	<Target Name="CopyExtraFilesToOutputWindows" Condition="'$(OS)'=='Windows_NT'">
		<Copy SourceFiles="@(LocalizeFiles)" DestinationFolder="$(RootDir)/output/$(Configuration)/localizations"/>
	</Target>

	<Target Name="Compile" DependsOnTargets="CopyExtraFilesToOutput; RestorePackages">
		<MSBuild Projects="$(RootDir)/$(Solution)" Targets="Build" Properties="Configuration=$(Configuration)"/>
	</Target>

	<Target Name="CopyAbout" DependsOnTargets="SetAssemblyVersion">
		<Copy SourceFiles="$(RootDir)/output/Installer/about.htm" DestinationFolder="$(RootDir)/output/$(Configuration)"/>
	</Target>

	<Target Name="VersionNumbers" DependsOnTargets="GetVersion">
		<PropertyGroup>
			<Version>$(GitVersion_MajorMinorPatch)</Version>
		</PropertyGroup>
		<Message Text="Version: $(Version)" Importance="high"/>
		<Message Text="##teamcity[buildNumber '$(Version).$(BUILD_NUMBER).$(BUILD_VCS_NUMBER)']"
			Condition="'$(teamcity_version)' != ''"/>
		<WriteLinesToFile File="$(RootDir)/gitversion.properties" Overwrite="true" Lines="BuildVersion=$(GitVersion_SemVer).$(BUILD_NUMBER)" />
	</Target>

	<Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
		<!-- Copy these so we aren't modifying the original, which then is a pain on dev machines. -->
		<Copy SourceFiles="$(RootDir)/DistFiles/about.htm"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<Message Text="Version=$(Version),BUILD_VCS_NUMBER=$(BUILD_VCS_NUMBER)"/>
		<FileUpdate File="$(RootDir)/output/Installer/about.htm"
			DatePlaceholder="DEV_RELEASE_DATE" Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
		<FileUpdate File="$(RootDir)/output/Installer/about.htm" DateFormat="yyyy" DatePlaceholder="DEV_RELEASE_YEAR"
			Regex="FBCOMMITID" ReplacementText="$(BUILD_VCS_NUMBER)"/>

		<Copy SourceFiles="$(RootDir)/DistFiles/License.htm"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<FileUpdate File="$(RootDir)/output/Installer/License.htm"
			DatePlaceholder="DEV_RELEASE_DATE" Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
		<FileUpdate File="$(RootDir)/output/Installer/License.htm"
			DateFormat="yyyy" DatePlaceholder="DEV_RELEASE_YEAR"
			Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
			<!-- The FileUpdate task checks whether ReplacementText is in the updated file contents before writing the contents back to the file, but we need to replace two dates and only one Regex, so we call FileUpdate twice with the same Regex and ReplacementText. -->

		<Copy SourceFiles="$(RootDir)/src/Installer/appcast.xml"
			DestinationFolder="$(RootDir)/output/Installer"/>
		<FileUpdate File="$(RootDir)/output/Installer/appcast.xml"
			Regex="DEV_VERSION_NUMBER" ReplacementText="$(Version)"/>
	</Target>

	<Target Name="PreparePublishingArtifacts" DependsOnTargets="VersionNumbers; CheckPreRequisites">
		<Exec Command='$(NuGetCommand) install MarkdownDeep.NET -ExcludeVersion -OutputDirectory $(RootDir)/build'/>
		<Copy SourceFiles="$(RootDir)/build/MarkdownDeep.NET/lib/.NetFramework 3.5/MarkdownDeep.dll"
			DestinationFolder="$(RootDir)/build/"/>
		<GenerateReleaseArtifacts MarkdownFile="$(RootDir)/src/Installer/ReleaseNotes.md"
			HtmlFile="$(RootDir)/src/Installer/$(UploadFolder).htm" StampMarkdownFile="True" VersionNumber="$(Version)"
			ProductName="flexbridge" DebianChangeLog="$(RootDir)/debian/changelog"
			ChangeLogAuthorInfo="Jason Naylor &lt;jason_naylor@sil.org&gt;"
			Release="$(Release)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<CallTarget Targets="TestOnly"/>
	</Target>

	<Target Name="TestOnly" DependsOnTargets="RunNUnitTC;RunNUnit"/>

	<Target Name="RunNUnitTC" Condition="'$(teamcity_version)' != ''">
		<ItemGroup>
			<TestAssemblies Include="$(RootDir)/output/$(Configuration)/*Tests.dll"
				Exclude="**/obj/**"/>
		</ItemGroup>
		<PropertyGroup>
			<ExcludeCategory Condition="'$(ExtraExcludeCategory)'!=''">SkipOnTeamCity,$(ExtraExcludeCategories)</ExcludeCategory>
			<ExcludeCategory Condition="'$(ExtraExcludeCategory)'==''">SkipOnTeamCity</ExcludeCategory>
		</PropertyGroup>
		<NUnitTeamCity
			Assemblies="@(TestAssemblies)"
			ExcludeCategory="$(ExcludeCategory)"
			NUnitVersion="NUnit-2.6.4" />
	</Target>

	<Target Name="RunNUnit" Condition="'$(teamcity_version)' == ''">
		<ItemGroup>
			<TestAssemblies Include="$(RootDir)/output/$(Configuration)/*Tests.dll" />
		</ItemGroup>

		<NUnit Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.Runners.Net4.2.6.4/tools"
			TestInNewThread="false"
			ExcludeCategory="$(ExtraExcludeCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)"
			Force32Bit="$(useNUnit-x86)"
			Verbose="true"
			OutputXmlFile="$(RootDir)/output/$(Configuration)/TestResults.xml"/>
	</Target>

	<!-- *********************** Installer stuff below.  ******************************* -->

	<!-- For building an an installer on TeamCity (use TestInstallerBuild.bat to run locally) -->
	<Target Name="Installer" DependsOnTargets="VersionNumbers; BuildRelease; Test" Condition="'$(OS)'=='Windows_NT'"/>
	<Target Name="Patcher" DependsOnTargets="VersionNumbers; BuildPatch; Test" Condition="'$(OS)'=='Windows_NT'"/>
</Project>
